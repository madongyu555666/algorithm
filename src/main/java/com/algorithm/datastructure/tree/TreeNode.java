package com.algorithm.datastructure.tree;

public class TreeNode {
    public String value;
    public TreeNode left;
    public TreeNode right;

    public TreeNode(String value) {
        this.value = value;
    }

    /**
     * 基本概念
     * 结点拥有的子树数被称为结点的度。
     * 度为0的结点称为叶节点或者终端结点
     * 度不为0的结点称为分支结点。除根结点外，分支结点也被称为内部结点。
     * 结点的子树的根称为该结点的孩子，该结点称为孩子的双亲或父结点。同一个双亲的孩子之间互称为兄弟
     * 树的度是树中各个结点度的最大值。
     *
     * 结点的层次从根开始定义起，根为第一层，根的孩子为第二层。双亲在同一层的结点互为堂兄弟。
     * 树中结点的最大层次称为树的深度或高度。如果将树中结点的各个子树看成从左到右是有次序的，不能互换的，则称改树为有序树
     * 否则称为无序树。
     *
     *
     *
     *
     */


    /**
     * 二叉树的基本概念
     * 二叉树是每个节点最多有两个子树的树结构。通常子树被称为‘左子树’和‘右子树’
     * 特点:
     * 1.二叉树不存在度大于2的结点。
     * 2.二叉树的子树有左右之分，次序不能颠倒。
     *
     */

    /**
     * 斜树的基本概念
     * 所有的结点都只有左子树的二叉树叫左斜树。所有的结点都只有右子树的二叉树叫右斜树，这两种统称为斜树
     * 斜树每一层只有一个结点，结点的个数与二叉树的深度相同。其实斜树就是线性表的结构
     */

    /**
     * 满二叉树的基本概念
     * 在一颗二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。
     * 特点：
     * 1.叶子只能出现在最下一层
     * 2.非叶子结点的度一定是2
     * 同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。
     */

    /**
     * 完全二叉树的基本概念
     * 若设二叉树的高度为h，除第h层外，其它各层（1~h-1）的结点数都达到最大个数，第h层有叶子结点
     * ，并且叶子结点都是从左到右依次排布，这就是完全二叉树。
     * 特点：
     * 1.叶子结点只能出现在最下两层
     * 2.最下层叶子在左部并且连续
     * 3.同样结点数的二叉树，完全二叉树的深度最小。
     */

    /**
     * 平衡二叉树的基本概念
     * 平衡二叉树又被称为AVL树（区别于AVL算法），它是一颗二叉排序树，且具有以下性质：
     * 1.它是一颗空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一颗平衡二叉树
     * 2.非叶子节点值大于左边子节点，小于右边子节点；
     * 3.没有值相等重复的结点
     */

    /**
     * 红黑树的基本概念
     * 因为平衡二叉树查询性能和树的层级（h高度）成反比，h值越小查询越快，为了保证树的结构左右两端数据大致平衡
     * 降低二叉树的查询难度一般会采用一种算法机制实现节点数据结构的平衡，实现了这种算法就有红黑树
     * 。红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间负责度是logn，效率非常之高。例如：
     * java集合中的TreeSet和TreeMap
     *
     * 红黑树的特性：
     * 1.每个节点或者是黑色，或者是红色
     * 2.根节点是黑色
     * 3.每个叶子节点是黑色，注意:这里叶子节点，是指为空的叶子节点
     * 4.如果一个结点是红色的，则它的子节点必须是黑色的
     * 5.从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点
     */


    /**
     * B+树的基本概念
     * B+数充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找。
     * 例如mysql的数据库索引查找
     * 1.B+树的非叶子节点不保存关键字记录的指针，这样使的B+树每个节点所能保存的关键字大大增加
     * 2.B+树叶子节点保存了父结点的所有关键字和关键字记录的指针，每个叶子节点的关键字从小到大链接。
     * 3.B+树的根节点关键字数量和其子节点个数相等
     * 4.B+的非叶子节点只进行数据索引，不会存实际的关键字记录的指针，所有数据地址必须要到叶子节点才能获取到
     * 所以每次数据查询的次数都一样。
     */



}
